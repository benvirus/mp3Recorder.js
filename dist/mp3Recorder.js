(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.MP3Recorder = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var bundleFn = arguments[3];
var sources = arguments[4];
var cache = arguments[5];

var stringify = JSON.stringify;

module.exports = function (fn, options) {
    var wkey;
    var cacheKeys = Object.keys(cache);

    for (var i = 0, l = cacheKeys.length; i < l; i++) {
        var key = cacheKeys[i];
        var exp = cache[key].exports;
        // Using babel as a transpiler to use esmodule, the export will always
        // be an object with the default export as a property of it. To ensure
        // the existing api and babel esmodule exports are both supported we
        // check for both
        if (exp === fn || exp && exp.default === fn) {
            wkey = key;
            break;
        }
    }

    if (!wkey) {
        wkey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);
        var wcache = {};
        for (var i = 0, l = cacheKeys.length; i < l; i++) {
            var key = cacheKeys[i];
            wcache[key] = key;
        }
        sources[wkey] = [
            Function(['require','module','exports'], '(' + fn + ')(self)'),
            wcache
        ];
    }
    var skey = Math.floor(Math.pow(16, 8) * Math.random()).toString(16);

    var scache = {}; scache[wkey] = wkey;
    sources[skey] = [
        Function(['require'], (
            // try to call default if defined to also support babel esmodule
            // exports
            'var f = require(' + stringify(wkey) + ');' +
            '(f.default ? f.default : f)(self);'
        )),
        scache
    ];

    var workerSources = {};
    resolveSources(skey);

    function resolveSources(key) {
        workerSources[key] = true;

        for (var depPath in sources[key][1]) {
            var depKey = sources[key][1][depPath];
            if (!workerSources[depKey]) {
                resolveSources(depKey);
            }
        }
    }

    var src = '(' + bundleFn + ')({'
        + Object.keys(workerSources).map(function (key) {
            return stringify(key) + ':['
                + sources[key][0]
                + ',' + stringify(sources[key][1]) + ']'
            ;
        }).join(',')
        + '},{},[' + stringify(skey) + '])'
    ;

    var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;

    var blob = new Blob([src], { type: 'text/javascript' });
    if (options && options.bare) { return blob; }
    var workerUrl = URL.createObjectURL(blob);
    var worker = new Worker(workerUrl);
    worker.objectURL = workerUrl;
    return worker;
};

},{}],2:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _recorder=require('./recorder.js');var _recorder2=_interopRequireDefault(_recorder);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MP3Recorder=function(){function MP3Recorder(){var _this=this;_classCallCheck(this,MP3Recorder);try{window.AudioContext=window.AudioContext||window.webkitAudioContext;window.navigator.getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;window.URL=window.URL||window.webkitURL;this.audio_context=new AudioContext();}catch(e){alert('No web audio support in this browser!');}navigator.getUserMedia({audio:true},function(stream){var input=_this.audio_context.createMediaStreamSource(stream);_this.recorder=new _recorder2.default(input,{numChannels:1});},function(e){__log('No live audio input: '+e);});}_createClass(MP3Recorder,[{key:'start',value:function start(){this.recorder.record();}},{key:'stop',value:function stop(){this.recorder.stop();}},{key:'finish',value:function finish(){}}]);return MP3Recorder;}();if(typeof define==='function'&&define.amd){define('MP3Recorder',[],function(){return MP3Recorder;});// checking that module is an object too because of umdjs/umd#35
}else if((typeof exports==='undefined'?'undefined':_typeof(exports))==='object'&&(typeof module==='undefined'?'undefined':_typeof(module))==='object'){module.exports=MP3Recorder;}exports.default=MP3Recorder;

},{"./recorder.js":4}],3:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var mp3codec;exports.default=function(self){importScripts('https://ben.mp3-recorder.com/dist/libmp3lame.min.js');self.addEventListener('message',function(e){console.log(e.data);switch(e.data.cmd){case'init':if(!e.data.config){e.data.config={};}mp3codec=Lame.init();Lame.set_mode(mp3codec,e.data.config.mode||Lame.JOINT_STEREO);Lame.set_num_channels(mp3codec,e.data.config.channels||2);Lame.set_num_samples(mp3codec,e.data.config.samples||-1);Lame.set_in_samplerate(mp3codec,e.data.config.samplerate||44100);Lame.set_out_samplerate(mp3codec,e.data.config.samplerate||44100);Lame.set_bitrate(mp3codec,e.data.config.bitrate||128);Lame.init_params(mp3codec);console.log('Version :',Lame.get_version()+' / ','Mode: '+Lame.get_mode(mp3codec)+' / ','Samples: '+Lame.get_num_samples(mp3codec)+' / ','Channels: '+Lame.get_num_channels(mp3codec)+' / ','Input Samplate: '+Lame.get_in_samplerate(mp3codec)+' / ','Output Samplate: '+Lame.get_in_samplerate(mp3codec)+' / ','Bitlate :'+Lame.get_bitrate(mp3codec)+' / ','VBR :'+Lame.get_VBR(mp3codec));break;case'encode':var mp3data=Lame.encode_buffer_ieee_float(mp3codec,e.data.buf,e.data.buf);self.postMessage({cmd:'data',buf:mp3data.data});break;case'finish':var mp3data=Lame.encode_flush(mp3codec);self.postMessage({cmd:'end',buf:mp3data.data});Lame.close(mp3codec);mp3codec=null;break;}});};

},{}],4:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _webworkify=require('webworkify');var _webworkify2=_interopRequireDefault(_webworkify);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var segmentNum=0;var Uint8ArrayToFloat32Array=function Uint8ArrayToFloat32Array(u8a){var f32Buffer=new Float32Array(u8a.length);for(var i=0;i<u8a.length;i++){var value=u8a[i<<1]+(u8a[(i<<1)+1]<<8);if(value>=0x8000)value|=~0x7FFF;f32Buffer[i]=value/0x8000;}return f32Buffer;};var Recorder=function(){function Recorder(source,cfg){var _this=this;_classCallCheck(this,Recorder);var config=cfg||{};var bufferLen=config.bufferLen||4096;var numChannels=config.numChannels||2;this.context=source.context;this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,bufferLen,numChannels,numChannels);this.recorderWorker=new _webworkify2.default(require('./recorderWorker.js'));this.recorderWorker.onmessage=function(e){var buffer=new Uint8Array(e.data);segmentNum++;encoderWorker.postMessage({cmd:'encode',buf:Uint8ArrayToFloat32Array(buffer)});};this.recorderWorker.postMessage({command:'init',config:{sampleRate:this.context.sampleRate,numChannels:numChannels}});var encoderWorker=new _webworkify2.default(require('./mp3Worker.js'));encoderWorker.postMessage({cmd:'init',config:{mode:3,channels:1,samplerate:44100,bitrate:16}});this.node.onaudioprocess=function(e){console.log(111);if(!_this.recording)return;var buffer=[];for(var channel=0;channel<numChannels;channel++){buffer.push(e.inputBuffer.getChannelData(channel));}_this.recorderWorker.postMessage({command:'record',buffer:buffer});};source.connect(this.node);this.node.connect(this.context.destination);}_createClass(Recorder,[{key:'record',value:function record(){this.recording=true;console.log(this.recording);}},{key:'stop',value:function stop(){this.recording=false;console.log(this.recording);}},{key:'clear',value:function clear(){this.worker.postMessage({command:'clear'});}}]);return Recorder;}();exports.default=Recorder;

},{"./mp3Worker.js":3,"./recorderWorker.js":5,"webworkify":1}],5:[function(require,module,exports){
'use strict';Object.defineProperty(exports,"__esModule",{value:true});var recLength=0,recBuffers=[],sampleRate,numChannels;function init(config){sampleRate=config.sampleRate;numChannels=config.numChannels;initBuffers();}function clear(){recLength=0;recBuffers=[];initBuffers();}function initBuffers(){for(var channel=0;channel<numChannels;channel++){recBuffers[channel]=[];}}function mergeBuffers(recBuffers,recLength){var result=new Float32Array(recLength);var offset=0;for(var i=0;i<recBuffers.length;i++){result.set(recBuffers[i],offset);offset+=recBuffers[i].length;}return result;}function interleave(inputL,inputR){var length=inputL.length+inputR.length;var result=new Float32Array(length);var index=0,inputIndex=0;while(index<length){result[index++]=inputL[inputIndex];result[index++]=inputR[inputIndex];inputIndex++;}return result;}function floatTo16BitPCM(output,offset,input){for(var i=0;i<input.length;i++,offset+=2){var s=Math.max(-1,Math.min(1,input[i]));output.setInt16(offset,s<0?s*0x8000:s*0x7FFF,true);}}function writeString(view,offset,string){for(var i=0;i<string.length;i++){view.setUint8(offset+i,string.charCodeAt(i));}}function encodeWAV(samples){var buffer=new ArrayBuffer(samples.length*2);var view=new DataView(buffer);floatTo16BitPCM(view,0,samples);return view;}exports.default=function(self){self.addEventListener('message',function(e){switch(e.data.command){case'init':init(e.data.config);break;case'record':record(e.data.buffer);break;case'exportWAV':exportWAV(e.data.type);break;case'getBuffer':getBuffer();break;case'clear':clear();break;}});function record(inputBuffer){for(var channel=0;channel<numChannels;channel++){recBuffers[channel]=[];recBuffers[channel].push(inputBuffer[channel]);}recLength=inputBuffer[0].length;exportWAV();}function exportWAV(){var buffers=[];for(var channel=0;channel<numChannels;channel++){buffers.push(mergeBuffers(recBuffers[channel],recLength));}if(numChannels===2){var interleaved=interleave(buffers[0],buffers[1]);}else{var interleaved=buffers[0];}var dataview=encodeWAV(interleaved);self.postMessage(dataview.buffer);}};

},{}]},{},[2])(2)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
